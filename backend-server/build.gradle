plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'

	// Spring REST Docs
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
	id "com.epages.restdocs-api-spec" version "0.16.2"
}

group = 'com.viewpharm.yakal'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	set("snippetsDir", file('build/generated-snippets'))
}

dependencies {
	// Spring Date JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Spring Security + OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Communication
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Spring Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Validation
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// Spring REST Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec:0.17.1'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	// Apache Commons IO
	implementation 'commons-io:commons-io:2.13.0'

	// Bouncy Castle
	implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.72'

	// Firebase
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	// IOS Push
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'
	implementation 'org.drjekyll:javapns:2.4.2'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Schedule Lock
	implementation 'net.javacrumbs.shedlock:shedlock-spring:5.6.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.6.0'

	// Test
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MYSQL Driver
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Configuration Metadata
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

/**
 * <p>
 * 개발환경에서만 API 문서를 제공하고자 한다면 빌드태스크에 asciidoctor 를 추가합니다.
 * asciidoctor 가 수행될 때 통합테스트 실행 태스크 restDocsTest 를 수행하기에
 * restDocsTest 를 추가로 수행하지 않아도 됩니다.
 * </p>
 * @see <a href="https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/">Asciidoctor Gradle Plugin Suite</a>
 *
 * ex)<code>./gradlew clean asciidoctor build</code>
 */
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.register('doctest', Test) {
	outputs.dir snippetsDir

	useJUnitPlatform {
		includeTags("restDocs")
	}

	finalizedBy "asciidoctor"
}

tasks.named("asciidoctor") {
	dependsOn test
	dependsOn doctest

	inputs.dir snippetsDir
	configurations "asciidoctorExt"
	baseDirFollowsSourceDir()
}

tasks.register("apibuild", GradleBuild) {
	tasks = ["clean", "asciidoctor", "build"]
}

springBoot {
	buildInfo()
}

gitProperties {
	dateFormat = "yyyy-MM-dd'T'HH:mm:ss.Zz"
	dateFormatTimeZone = "Asia/Seoul"
	failOnNoGitDirectory = false
}

bootJar {
	dependsOn asciidoctor

	from("${asciidoctor.outputDir}") {
		into "BOOT-INF/classes/static/docs"
	}

	archiveFileName.set "application.jar"
}


/*
 * Submodule Copy Function
 */
//processResources.dependsOn('copyGitSubmodule')
//
//tasks.register('copyGitSubmodule', Copy) {
//	from('../properties/was')
//	into('./src/main/resources')
//}

jar {
	enabled = false
}

/**
 * Query DSL Build Options (선택사항)
 */
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir, "$projectDir/src/main/java" ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}