plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
	id "com.epages.restdocs-api-spec" version "0.16.2"
}

group = 'com.viewpharm.yakal'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	set("snippetsDir", file('build/generated-snippets'))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'org.bouncycastle:bcprov-jdk15to18:1.75'
	implementation 'org.bouncycastle:bcpkix-jdk15to18:1.75'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'com.google.firebase:firebase-admin:9.2.0'
	implementation 'org.drjekyll:javapns:2.4.2'
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'

	compileOnly 'org.projectlombok:lombok'
	compileOnly 'com.jcraft:jsch:0.1.55'

	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.epages:restdocs-api-spec:0.17.1'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.register('doctest', Test) {
	outputs.dir snippetsDir

	useJUnitPlatform {
		includeTags("restDocs")
	}

	finalizedBy "asciidoctor"
}

tasks.named("asciidoctor") {
	dependsOn test
	dependsOn doctest

	inputs.dir snippetsDir
	configurations "asciidoctorExt"
	baseDirFollowsSourceDir()
}

/**
 * <p>
 * 개발환경에서만 API 문서를 제공하고자 한다면 빌드태스크에 asciidoctor 를 추가합니다.
 * asciidoctor 가 수행될 때 통합테스트 실행 태스크 restDocsTest 를 수행하기에
 * restDocsTest 를 추가로 수행하지 않아도 됩니다.
 * </p>
 * @see <a href="https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/">Asciidoctor Gradle Plugin Suite</a>
 *
 * ex)<code>./gradlew clean asciidoctor build</code>
 */
tasks.register("apibuild", GradleBuild) {
	tasks = ["clean", "asciidoctor", "build"]
}

springBoot {
	buildInfo()
}

gitProperties {
	dateFormat = "yyyy-MM-dd'T'HH:mm:ss.Zz"
	dateFormatTimeZone = "Asia/Seoul"
	failOnNoGitDirectory = false
}

bootJar {
	dependsOn asciidoctor

	from("${asciidoctor.outputDir}") {
		into "BOOT-INF/classes/static/docs"
	}

	archiveFileName.set "application.jar"
}